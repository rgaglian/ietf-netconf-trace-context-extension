



Internet Engineering Task Force (IETF)                       R. Gagliano
Request for Comments: 0                                    Cisco Systems
Category: Standards Track                                     K. Larsson
ISSN: 2070-1721                                      Deutsche Telekom AG
                                                             J. Lindblad
                                                           Cisco Systems
                                                          29 August 2022


        NETCONF Extension to support Trace Context distribution

Abstract

   Network Configuration Protocol (NETCONF) defined in [RFC6241] and
   extended in [RFC8526] in order to support trace context distribution
   similarly as defined by [W3C-Trace-Context] for HTTP.

Status of This Memo

   This is an Internet Standards Track document.

   This document is a product of the Internet Engineering Task Force
   (IETF).  It represents the consensus of the IETF community.  It has
   received public review and has been approved for publication by the
   Internet Engineering Steering Group (IESG).  Further information on
   Internet Standards is available in Section 2 of RFC 7841.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc0.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Revised BSD License text as described in Section 4.e of the
   Trust Legal Provisions and are provided without warranty as described
   in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Implementation example: Open Telemetry
     1.2.  Use Cases
       1.2.1.  Provisioning root cause analysis
       1.2.2.  System performance profiling
     1.3.  Terminology
   2.  NETCONF Extension
   3.  Security Considerations
   4.  IANA Considerations
   5.  Acknowledgments
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Appendix A.  TO DO List
   Appendix B.  XML Attributes vs RPCs input augmentations discussion
           (to be deleted by RFC Editor)
   Authors' Addresses

1.  Introduction

   When working on distributed systems, there is a clear need that the
   different systems exchange trace context information.  In particular,
   this is needed for network automation, management, and control
   applications where the NETCONF protocol is very popular.

   The W3C has defined two HTTP headers for context propagation in
   scenarios of distributed systems such as defined in [RFC8309].  In
   that same sense, this document updates the NETCONF protocol to add
   the same concepts and enable trace context propagation.

   It is worth noting that the trace context is not meant to have any
   relationship with the data that is carried with a given operation
   (including configurations, service identifiers or state information).

   A trace context also differs from
   [I-D.lindblad-netconf-transaction-id] in several ways as the trace
   operation may involve any operation (including for example validate,
   lock, unlock, etc.)  Additionally, a trace context scope may include
   the full application stack (orchestrator, controller, devices, etc)
   rather than a single NETCONF server, which is the scope for the
   transaction-id.

   The following enhancement of the reference SDN Architecture from RFC
   8309 shows the impact of distributed traces for a network operator.

                    ------------------                    -------------
                   |   Orchestrator   |                   |           |
                   |                  |     ------------> |           |
                   .------------------.                   |           |
                  .          :         .                  |           |
                 .           :          .                 | Collector |
      ------------     ------------     ------------      | (Metrics, |
     |            |   |            |   |            |     |  Events,  |
     | Controller |   | Controller |   | Controller | --> |  Logs,    |
     |            |   |            |   |            |     |  Traces)  |
      ------------     ------------     ------------      |           |
         :              .       .               :         |           |
         :             .         .              :         |           |
         :            .           .             :         |           |
    ---------     ---------   ---------     ---------     |           |
   | Network |   | Network | | Network |   | Network |    |           |
   | Element |   | Element | | Element |   | Element | -> |           |
    ---------     ---------   ---------     ---------     -------------

           Figure 1: A Sample SDN Architecture from RFC8309 augmented
           to include the export of metrics, events, logs and traces
           from the different components to a common collector.

   The network automation, management and control architectures are
   distributed in nature.  In order to "manage the managers", operators
   would like to use the same techniques as any other distributed
   systems in theirs IT environment.  Solutions for analysing Metrics,
   Events, Logs and Traces (M.E.L.T.) are key for the successful
   monitoring and troubleshooting of such applications'.  Initiatives
   such as the OpenTelemetry [OpenTelemetry] enable rich ecosystems of
   tools that NETCONF-based applications would want to participate in.

   With the implementation of this trace context distribution extension
   to NETCONF, backend systems behind the M.E.L.T collector will be able
   to correlate information from different systems but related to a
   common context.

1.1.  Implementation example: Open Telemetry

   We will describe an example to show the value of trace context
   distribution in the NETCONF protocol.  In Figure 2, we show a
   deployment based on Figure 1 with a single controller and two network
   elements.  In this example, the NETCONF protocol is running between
   the Orchestrator and the Controller.  NETCONF is also used between
   the Controller and the Network Elements.

   Let's assume an edit-config operation between the orchestrator and
   the controller that results (either synchronously or asynchronously)
   in correspondents edit-config operations from the Controller towards
   the two network elements.  All traces operations are related and will
   create M.E.L.T data.

                 ------------------                        -------------
                 |   Orchestrator   |    OTLP protocol     |           |
                 |                  |  ----------------->  |           |
                .------------------.                       |           |
              .  NETCONF                                   |           |
             .   edit-config (trace-id "A", parent-id "A") | Collector |
   ------------                                            | (Metrics, |
   |            |                                          |  Events,  |
   | Controller |   ----------------------------------->   |  Logs,    |
   |            |                 OTLP protocol            |  Traces)  |
    ------------                                           |           |
      :      .  NETCONF                                    |           |
      :        .edit-config (trace-id "A", parent-id "B")  |           |
      :          .                                         |           |
    ---------     ---------                                |           |
   | Network |   | Network |       OTLP protocol           |           |
   | Element |   | Element |  ---------------------------> |           |
    ---------     ---------                                -------------

           Figure 2: An implementation example where the NETCONF protocol
            is used between the Orchestrator and the Controller and also between
            the Controller and the Network Elements. Every component export
           M.E.L.T information to the collector using the OTLP protocol.

   Each of the components in this example (Orchestrator, Controller and
   Network Elements) is exporting the M.E.L.T. information towards the
   collector using the OpenTelemetry Protocol (OTLP).

   For every edit-config operation, the trace context extension is
   included.  In particular, the same trace-id "A" (simplified encoding
   for documentation) is included in all related NETCONF message, which
   enables the collector and any backend application to correlate all
   M.E.L.T. messages related to this order in this distributed stack.

   Another interesting attribute is the parent-id.  We can see in this
   example that the parent-id between the orchestrator and the
   controller ("A") is different from the one between the controller and
   the network elements ("B").  This attribute will help the collector
   and the backend applications to build a connectivity graph to
   understand how M.E.L.T. information exported from one component is
   associated to the information exported from a different component.

   With this additional metadata exchanged between the components and
   exposed to the M.E.L.T collector, there are important improvements to
   the monitor and troubleshooting operations for the full application
   stack.

1.2.  Use Cases

1.2.1.  Provisioning root cause analysis

   When a provisioning activity fails, errors are typically propagated
   northbound, however this information may be difficult to troubleshoot
   and typically, operators are required to navigate logs across all the
   different components.

   With the support for context propagation as described in this
   document for NETCONF, the telemetry collector will be able to search
   every trace, event, metric, or log in connection to that trace-id and
   perform a root cause analysis.

1.2.2.  System performance profiling

   When operating a distributed system such as the one shown in
   Figure 2, operators are expected to benchmark what are the Key
   Performance Indicators (KPIs) for the most common tasks.  For
   example, what is the typical delay when provisioning a VPN service
   across different controllers and devices.

   Thanks to Application Performance Management (APM) systems, from
   these KPIs, an operator can detect a normal and abnormal behaviour of
   the distributed system.  Also, an operator can better plan any
   upgrades or enhancements in the platform.

   With the support for context propagation as described in this
   document for NETCONF, much richer system-wide KPIs can be defined and
   troubleshoot as the metrics and traces propagated by the different
   components share a common context.  Troubleshooting for abnormal
   behaviours can also be troubleshooted from the system view down to
   the individual element.

1.3.  Terminology

   The XML prefixes used in this document are mapped as follows:

   *  xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0",

   *  xmlns:notif="urn:ietf:params:xml:ns:netconf:notification:1.0",

   *  xmlns:yp="urn:ietf:params:xml:ns:yang:ietf-yang-patch" and

   *  xmlns:ypatch="urn:ietf:params:xml:ns:yang:ietf-yang-patch".

2.  NETCONF Extension

   When performing NETCONF operations, a NETCONF client MAY include a
   trace context propagation extension as additional information or
   "metadata" XML attributes regarding the current operation.  The
   [W3C-Trace-Context] defines two HTTP headers traceparent and
   tracestate for this purpose.  NETCONF clients that are taking
   advantage of this feature MUST add one w3ctc:traceparent attribute to
   the nc:rpc tag.

   A NETCONF server that receives a trace context propagation extension
   in the form of a w3ctc:traceparent attribute SHOULD apply the
   mutation rules described in [W3C-Trace-Context].  A NETCONF server
   MAY add one w3ctc:traceparent attribute in the nc:rpc-reply response
   to the nc:rpc tag above.  NETCONF servers MAY also add one
   w3ctc:traceparent attribute in notification and update messages:
   notif:notification, yp:push-update and yp:push-change-update.

   For example, a NETCONF client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:w3ctc="urn:ietf:params:xml:ns:netconf:w3ctc:1.0"
        w3ctc:traceparent=
          "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01">
     <get-config/>
   </rpc>

   In all cases above where a client or server adds a w3ctc:traceparent
   attribute to a tag, that client or server MAY also add one
   w3ctc:tracestate attribute to the same tag.

   The proper encoding and interpretation of the contents of the
   w3ctc:traceparent attribute is described in [W3C-Trace-Context]
   section 3.2 except 3.2.1.  The proper encoding and interpretation of
   the contents if the w3ctc:tracestate attribute is described in
   [W3C-Trace-Context] section 3.3 except 3.3.1 and 3.3.1.1.  A NETCONF
   tag can only have zero or one w3ctc:tracestate attributes, so its
   content MUST always be encoded as a single string.  The tracestate
   field value is a list of list-members separated by commas (,).  A
   list-member is a key/value pair separated by an equals sign (=).
   Spaces and horizontal tabs surrounding list-members are ignored.
   There is no limit to the number of list-members in a list.

   For example, a NETCONF client might send:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:w3ctc="urn:ietf:params:xml:ns:netconf:w3ctc:1.0"
        w3ctc:tracestate="rojo=00f067aa0ba902b7,congo=t61rcWkgMzE"
        w3ctc:traceparent=
          "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01">
     <get-config/>
   </rpc>

   As in all XML documents, the order between the attributes in an XML
   tag has no significance.  Clients and servers MUST be prepared to
   handle the attributes no matter in which order they appear.  The
   tracestate value MAY contain double quotes in its payload.  If so,
   they MUST be encoded according to XML rules, for example:

   <rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="1"
        xmlns:w3ctc="urn:ietf:params:xml:ns:netconf:w3ctc:1.0"
        w3ctc:traceparent=
          "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01"
        w3ctc:tracestate=
          "value-with-quotes=&quot;Quoted string&quot;,other-value=123">
     <get-config/>
   </rpc>

   TBD Errors ....

3.  Security Considerations

   TODO Security

4.  IANA Considerations

   This document registers the following capability identifier URN in
   the 'Network Configuration Protocol (NETCONF) Capability URNs'
   registry:

     urn:ietf:params:netconf:capability:w3ctc:1.0

   This document registers three XML namespace URNs in the 'IETF XML
   registry', following the format defined in RFC 3688
   (https://tools.ietf.org/html/rfc3688).

     URI: urn:ietf:params:xml:ns:netconf:w3ctc:1.0

     Registrant Contact: The NETCONF WG of the IETF.

     XML: N/A, the requested URI is an XML namespace.

5.  Acknowledgments

   TBD

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [W3C-Trace-Context]
              "W3C Recommendation on Trace Context", 23 November 2021,
              <https://www.w3.org/TR/2021/REC-trace-context-
              1-20211123/>.

6.2.  Informative References

   [I-D.lindblad-netconf-transaction-id]
              Lindblad, J., "Transaction ID Mechanism for NETCONF", Work
              in Progress, Internet-Draft, draft-lindblad-netconf-
              transaction-id-02, 8 June 2022,
              <https://www.ietf.org/archive/id/draft-lindblad-netconf-
              transaction-id-02.txt>.

   [OpenTelemetry]
              "OpenTelemetry Cloud Native Computing Foundation project",
              29 August 2022, <https://opentelemetry.io>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC8309]  Wu, Q., Liu, W., and A. Farrel, "Service Models
              Explained", RFC 8309, DOI 10.17487/RFC8309, January 2018,
              <https://www.rfc-editor.org/info/rfc8309>.

   [RFC8526]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "NETCONF Extensions to Support the Network
              Management Datastore Architecture", RFC 8526,
              DOI 10.17487/RFC8526, March 2019,
              <https://www.rfc-editor.org/info/rfc8526>.

   [W3C-Baggage]
              "W3C Propagation format for distributed context Baggage",
              23 November 2021,
              <https://www.w3.org/TR/baggage/#examples-of-http-headers>.

Appendix A.  TO DO List

   *  Manage versioning of the trace-context specification

   *  We intend to extend the trace-concext capability to RESTCONF in
      future draft

   *  The W3C is working on a draft document to introduce the concept of
      "baggage" [W3C-Baggage] that we expect part of a future draft for
      NETCONF and RESTCONF

Appendix B.  XML Attributes vs RPCs input augmentations discussion (to
             be deleted by RFC Editor)

   There are arguments that can be raised regarding using XML Attribute
   or to augment NETCONF RPCs.

   We studied Pro/Cons of each option and decided to propose XML
   attributes:

   XML Attributes Pro:

   *  Literal alignment with W3C specification

   *  Same encoding for RESTCONF and NETCONF

   *  One specification for all current and future rpcs

   XML Attributes Cons:

   *  No YANG modelling, full attribute as a single string

   *  Dependency on W3C for any extension or changes in the future as
      encoding will be dictated by string encoding

   RPCs Input Augmentations Pro:

   *  YANG model of every leaf

   *  Re-use of YANG toolkits

   *  Simple updates by augmentations on existing YANG module

   *  Possibility to express deviations in case of partial support

   RPCs Input Augmentations Cons:

   *  Need to augment every rpc, including future rpcs would need to
      consider these augmentations, which is harder to maintain

   *  There is no literal alignment with W3C standard.  However, as
      mentioned before most of the time there will be modifications to
      the content

   *  Would need updated RFP for each change at W3C, which will make
      adoption of new features slower

Authors' Addresses

   Roque Gagliano
   Cisco Systems
   Avenue des Uttins 5
   CH-1180 Rolle
   Switzerland
   Email: rogaglia@cisco.com


   Kristian Larsson
   Deutsche Telekom AG
   Email: kll@dev.terastrm.net


   Jan Lindblad
   Cisco Systems
   Email: jlindbla@cisco.com
